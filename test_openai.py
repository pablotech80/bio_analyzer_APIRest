#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar la configuraci√≥n de OpenAI
"""
import os
import sys

def test_openai_setup():
    """Diagnosticar la configuraci√≥n de OpenAI"""
    print("üîç Diagn√≥stico de OpenAI Setup")
    print("=" * 40)
    
    # 1. Verificar si openai est√° instalado
    try:
        import openai
        print("‚úÖ Dependencia 'openai' instalada correctamente")
        print(f"   Versi√≥n: {openai.__version__}")
    except ImportError:
        print("‚ùå Dependencia 'openai' NO est√° instalada")
        print("   Soluci√≥n: pip install openai==1.51.2")
        return False
    
    # 2. Verificar variable de entorno
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY no est√° configurada")
        print("   Soluci√≥n: Agregar OPENAI_API_KEY a tu archivo .env")
        return False
    
    print("‚úÖ OPENAI_API_KEY est√° configurada")
    print(f"   Key (primeros 10 caracteres): {api_key[:10]}...")
    
    # 3. Intentar inicializar cliente con inicializaci√≥n simple
    try:
        from openai import OpenAI
        # Inicializaci√≥n simple sin argumentos adicionales
        client = OpenAI(api_key=api_key)
        print("‚úÖ Cliente OpenAI inicializado correctamente")
        
        # 4. Test b√°sico de modelos disponibles (sin costo)
        try:
            print("üîÑ Probando conexi√≥n b√°sica...")
            models = client.models.list()
            print("‚úÖ Conexi√≥n con OpenAI exitosa")
            print(f"   Modelos disponibles: {len(list(models.data))} encontrados")
        except Exception as e:
            print(f"‚ö†Ô∏è  Conexi√≥n b√°sica fall√≥: {e}")
            print("   Esto puede ser normal si hay restricciones de red")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al inicializar cliente OpenAI: {e}")
        print("   Posibles soluciones:")
        print("   - Verificar que la API key sea v√°lida")
        print("   - Actualizar la librer√≠a: pip install --upgrade openai")
        return False

def main():
    """Funci√≥n principal"""
    # Cargar variables de entorno desde .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ Variables de entorno cargadas desde .env")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv no disponible, usando variables de sistema")
    
    success = test_openai_setup()
    
    print("\n" + "=" * 40)
    if success:
        print("üéâ ¬°Configuraci√≥n de OpenAI correcta!")
        print("   Tu FitMasterService deber√≠a funcionar ahora.")
        print("\nüîß Pr√≥ximos pasos:")
        print("   1. Aseg√∫rate de que fitmaster_service.py use inicializaci√≥n simple")
        print("   2. Reinicia tu aplicaci√≥n Flask")
        print("   3. Prueba un an√°lisis biom√©trico")
    else:
        print("üö® Hay problemas con la configuraci√≥n de OpenAI")
        print("   Revisa los errores arriba y sigue las soluciones.")
        print("\nüîß Pr√≥ximos pasos:")
        print("   1. Corrige los problemas identificados")
        print("   2. Ejecuta este script nuevamente")
        print("   3. Reinicia tu aplicaci√≥n Flask")

if __name__ == "__main__":
    main()
