"""Initial schema

Revision ID: 425d964eee8d
Revises:
Create Date: 2025-10-07 13:19:04.525798

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "425d964eee8d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("username", sa.String(length=80), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("date_of_birth", sa.Date(), nullable=True),
        sa.Column(
            "gender",
            sa.Enum("male", "female", "other", name="gender_types"),
            nullable=True,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("email_verified_at", sa.DateTime(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("reset_password_token", sa.String(length=255), nullable=True),
        sa.Column("reset_password_expires", sa.DateTime(), nullable=True),
        sa.Column("verification_token", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_users_username"), ["username"], unique=True
        )

    op.create_table(
        "biometric_analyses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False, comment="Weight in kg"),
        sa.Column("height", sa.Float(), nullable=False, comment="Height in cm"),
        sa.Column("age", sa.Integer(), nullable=False, comment="Age in years"),
        sa.Column(
            "gender",
            sa.String(length=10),
            nullable=False,
            comment="Gender: 'male', 'female', or 'other'",
        ),
        sa.Column(
            "neck", sa.Float(), nullable=False, comment="Neck circumference in cm"
        ),
        sa.Column(
            "waist", sa.Float(), nullable=False, comment="Waist circumference in cm"
        ),
        sa.Column(
            "hip",
            sa.Float(),
            nullable=True,
            comment="Hip circumference in cm (optional for males)",
        ),
        sa.Column(
            "biceps_left",
            sa.Float(),
            nullable=True,
            comment="Left biceps circumference in cm",
        ),
        sa.Column(
            "biceps_right",
            sa.Float(),
            nullable=True,
            comment="Right biceps circumference in cm",
        ),
        sa.Column(
            "thigh_left",
            sa.Float(),
            nullable=True,
            comment="Left thigh (quadriceps) circumference in cm",
        ),
        sa.Column(
            "thigh_right",
            sa.Float(),
            nullable=True,
            comment="Right thigh (quadriceps) circumference in cm",
        ),
        sa.Column(
            "calf_left",
            sa.Float(),
            nullable=True,
            comment="Left calf circumference in cm",
        ),
        sa.Column(
            "calf_right",
            sa.Float(),
            nullable=True,
            comment="Right calf circumference in cm",
        ),
        sa.Column(
            "activity_factor",
            sa.Float(),
            nullable=True,
            comment="Activity multiplier (1.2-1.9)",
        ),
        sa.Column(
            "activity_level",
            sa.String(length=32),
            nullable=True,
            comment="Activity level: sedentary, light, moderate, active, very_active",
        ),
        sa.Column(
            "goal",
            sa.String(length=32),
            nullable=True,
            comment="Goal: lose_weight, maintain, gain_muscle",
        ),
        sa.Column("bmi", sa.Float(), nullable=True, comment="Body Mass Index"),
        sa.Column("bmr", sa.Float(), nullable=True, comment="Basal Metabolic Rate"),
        sa.Column(
            "tdee", sa.Float(), nullable=True, comment="Total Daily Energy Expenditure"
        ),
        sa.Column(
            "body_fat_percentage", sa.Float(), nullable=True, comment="Body fat %"
        ),
        sa.Column(
            "lean_mass", sa.Float(), nullable=True, comment="Lean body mass in kg"
        ),
        sa.Column("fat_mass", sa.Float(), nullable=True, comment="Fat mass in kg"),
        sa.Column("ffmi", sa.Float(), nullable=True, comment="Fat-Free Mass Index"),
        sa.Column("body_water", sa.Float(), nullable=True, comment="Body water %"),
        sa.Column(
            "waist_hip_ratio", sa.Float(), nullable=True, comment="Waist-to-Hip Ratio"
        ),
        sa.Column(
            "waist_height_ratio",
            sa.Float(),
            nullable=True,
            comment="Waist-to-Height Ratio",
        ),
        sa.Column(
            "metabolic_age",
            sa.Float(),
            nullable=True,
            comment="Estimated metabolic age",
        ),
        sa.Column(
            "maintenance_calories",
            sa.Float(),
            nullable=True,
            comment="Daily maintenance calories",
        ),
        sa.Column(
            "protein_grams",
            sa.Float(),
            nullable=True,
            comment="Daily protein target in grams",
        ),
        sa.Column(
            "carbs_grams",
            sa.Float(),
            nullable=True,
            comment="Daily carbs target in grams",
        ),
        sa.Column(
            "fats_grams",
            sa.Float(),
            nullable=True,
            comment="Daily fats target in grams",
        ),
        sa.Column(
            "fitmaster_data",
            sa.JSON(),
            nullable=True,
            comment="Complete FitMaster AI response: interpretation, nutrition, training",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            nullable=False,
            comment="Record creation timestamp",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            nullable=False,
            comment="Last modification timestamp",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("biometric_analyses", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_biometric_analyses_user_id"), ["user_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("biometric_analyses", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_biometric_analyses_user_id"))

    op.drop_table("biometric_analyses")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_username"))
        batch_op.drop_index(batch_op.f("ix_users_email"))

    op.drop_table("users")
    op.drop_table("role_permissions")
    op.drop_table("roles")
    op.drop_table("permissions")
    # ### end Alembic commands ###
